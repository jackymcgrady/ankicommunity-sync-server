services:
  # Anki Sync Server with Cognito authentication
  anki-sync-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: anki-sync-server-nginx
    user: "${CONTAINER_USER_ID:-1000}:${CONTAINER_GROUP_ID:-1000}"
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT:-512M}
          cpus: '${CPU_LIMIT:-1.0}'
        reservations:
          memory: ${MEMORY_RESERVATION:-256M}
          cpus: '${CPU_RESERVATION:-0.5}'
    environment:
      # User Manager Configuration
      - ANKISYNCD_USER_MANAGER=${ANKISYNCD_USER_MANAGER:-ankisyncd.users.cognito_manager.CognitoUserManager}
      
      # AWS Cognito Configuration - Use environment variables for security
      - ANKISYNCD_COGNITO_USER_POOL_ID=${ANKISYNCD_COGNITO_USER_POOL_ID}
      - ANKISYNCD_COGNITO_CLIENT_ID=${ANKISYNCD_COGNITO_CLIENT_ID}
      - ANKISYNCD_COGNITO_CLIENT_SECRET=${ANKISYNCD_COGNITO_CLIENT_SECRET}
      - ANKISYNCD_COGNITO_REGION=${ANKISYNCD_COGNITO_REGION:-ap-southeast-1}
      
      # AWS Credentials - Use environment variables for security
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-ap-southeast-1}
      
      # Server Configuration
      - ANKISYNCD_HOST=${ANKISYNCD_HOST:-0.0.0.0}
      - ANKISYNCD_PORT=${ANKISYNCD_PORT:-27702}
      - ANKISYNCD_DATA_ROOT=${ANKISYNCD_DATA_ROOT:-/data/collections}
      - ANKISYNCD_BASE_URL=${ANKISYNCD_BASE_URL:-/sync/}
      - ANKISYNCD_BASE_MEDIA_URL=${ANKISYNCD_BASE_MEDIA_URL:-/msync/}
      - ANKISYNCD_SESSION_DB_PATH=${ANKISYNCD_SESSION_DB_PATH:-/data/session.db}
      - ANKISYNCD_AUTH_DB_PATH=${ANKISYNCD_AUTH_DB_PATH:-}
      
      # Python path for development
      - PYTHONPATH=/app/src
    volumes:
      - ./src:/app/src
      - ${DATA_VOLUME_SOURCE:-data}:/data:rw
    restart: unless-stopped
    command: >
      sh -c "
        mkdir -p /data/collections &&
        exec python -m ankisyncd
      "
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 27702)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - anki-network

  # nginx reverse proxy with Let's Encrypt SSL
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: anki-nginx-proxy
    ports:
      - "80:80"    # HTTP (redirects to HTTPS)
      - "443:443"  # HTTPS
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    volumes:
      # SSL certificates (Let's Encrypt)
      - ./letsencrypt:/etc/letsencrypt:rw
      # Web root for ACME challenge
      - ./certbot-www:/var/www/certbot:rw
      # nginx logs
      - ./logs/nginx:/var/log/nginx
    environment:
      # Domain and SSL Configuration
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      - SSL_MODE=${SSL_MODE:-self-signed}
      - DEV_MODE=${DEV_MODE:-false}
      - EMAIL=${EMAIL:-dev@localhost}
      
      # Nginx Proxy Configuration
      - ANKI_SYNC_SERVER_HOST=${ANKI_SYNC_SERVER_HOST:-anki-sync-server-nginx}
      - ANKI_SYNC_SERVER_PORT=${ANKI_SYNC_SERVER_PORT:-27702}
      - MAX_BODY_SIZE=${MAX_BODY_SIZE:-2G}
      - PROXY_CONNECT_TIMEOUT=${PROXY_CONNECT_TIMEOUT:-60s}
      - PROXY_SEND_TIMEOUT=${PROXY_SEND_TIMEOUT:-300s}
      - PROXY_READ_TIMEOUT=${PROXY_READ_TIMEOUT:-300s}
    depends_on:
      - anki-sync-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - anki-network

  # Certbot for Let's Encrypt certificate management
  certbot:
    image: certbot/certbot
    container_name: anki-certbot
    volumes:
      - ./letsencrypt:/etc/letsencrypt:rw
      - ./certbot-www:/var/www/certbot:rw
      - ./logs/certbot:/var/log/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${EMAIL:-dev@localhost} --agree-tos --no-eff-email -d ${DOMAIN_NAME:-localhost}
    profiles:
      - certbot
    networks:
      - anki-network

networks:
  anki-network:
    driver: bridge

volumes:
  data:
    driver: local
  letsencrypt:
    driver: local
  certbot-www:
    driver: local