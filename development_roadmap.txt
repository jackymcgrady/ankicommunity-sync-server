Roadmap: Upgrading AnkiCommunity Sync Server for Latest Anki Compatibility

Phase 1: Audit Current Implementation and Identify Gaps
	•	Review Existing Features: Thoroughly inspect the current ankicommunity-sync-server code to catalog supported sync features (deck, card, note syncing) and note any missing elements. For example, verify that it handles all Anki data types (notes, cards, decks, note types, etc.) in sync operations.
	•	Identify Outdated Protocol Usage: Compare the server’s sync protocol implementation against the latest Anki Desktop (from the jackymcgrady/anki repo). Document discrepancies:
	•	Media Sync Missing: Confirm that media file synchronization is not implemented or not functioning. The official sync design expects the server to store media files alongside the collection , so absence of this is a major gap.
	•	Protocol Changes: Note any new sync messages or fields introduced in recent Anki versions that the server doesn’t handle (e.g. new keys in the sync JSON, new endpoints, or differences in how sync steps are sequenced). Newer Anki clients often depend on protocol tweaks , so list those needed updates.
	•	Conflict Handling: Evaluate how the current server handles conflicting edits and whether it mirrors Anki’s conflict resolution. Identify if the server ever forces a full sync or merge conflicts differently than the official algorithm.
	•	Outcome of Audit: Prepare a report of missing features and needed updates. Prioritize these findings – media sync support and protocol compliance will likely be top priority (since without them, new clients may fail to sync ). Secondary gaps (if any) like partial deck sync issues or minor differences in conflict handling are noted for later phases.

Phase 2: Update Core Deck & Card Sync (Ensure “Full” Sync Support)
	•	Synchronize with Latest Anki Data Models: Update the server’s sync logic to use the latest collection schema and data model from jackymcgrady/anki. This may involve upgrading any embedded Anki library or adjusting SQL schema handling so that all card, note, deck fields match the latest version.
	•	Complete Deck/Card Sync Features: Implement or fix any missing pieces in deck and card synchronization:
	•	Ensure deck hierarchy and deck options sync properly (e.g. if deck options or descriptions were added in new versions, make sure they transfer).
	•	Ensure note types (models) and card templates are included in sync packets if they’ve been changed on one side.
	•	Verify that tags and any new card properties introduced in recent Anki (like scheduling tweaks) sync as expected.
	•	Conflict Resolution Alignment: Refine conflict handling to mirror Anki Desktop’s expectations:
	•	Implement logic to detect when a full sync is required. For example, if the collection IDs (schema mod times) differ between client and server, the server should signal the need for a full sync just as the official client would (Anki triggers a full sync when the collection schema ID mismatches ). This typically means ensuring that during the meta sync step, the server returns the proper fields (mod, scm, etc.) so the client can decide on full sync if needed.
	•	Handle minor conflicts (the same note edited on both sides) using Anki’s rules. Usually, Anki prefers the side with the more recent modification time and merges changes accordingly. Our server should use the same approach (leveraging Anki’s sync algorithm if possible) so that conflicting edits are resolved consistently. If the current implementation doesn’t already rely on Anki’s merge logic, consider integrating the official syncer logic for conflict resolution.
	•	If a conflict is too large to merge (e.g. divergent collection histories), ensure the server responds in a way that causes the client to prompt the user to choose upload/download (for example, sending an appropriate msg and cont=false on the meta step to halt incremental sync ).
	•	Priority: These core sync fixes are high priority to maintain full deck and card sync fidelity. The goal by end of this phase is that a deck with notes and cards (minus media) can round-trip between Anki Desktop and the server with no data loss or mismatch. All incremental sync steps (apply changes, apply graves (deletions), chunking of data, etc.) should be verified against the latest protocol.

Phase 3: Implement Full Media Synchronization Support
	•	Design Media Sync Architecture: Plan how the server will store and transfer media files:
	•	Use a dedicated media directory (e.g. in the sync base folder) per user to store uploaded files, as recommended by Anki’s documentation . Each user’s media folder will mirror the Anki collection’s media folder.
	•	Maintain a media database or manifest to track file metadata (filenames, checksums, modification times, and a media sync USN counter). This allows the server to know which files have changed and need syncing. (Anki’s media sync uses a media.db or similar index – we should implement something analogous for tracking server-side media state).
	•	Expose Media Sync Endpoints: Add the required media sync API endpoints compatible with the Anki client’s expectations. Typically, the following operations are needed (as seen in the original Anki server logic):
	•	begin – Initialize a media sync session (the client may send a sync key and expect a response containing the server’s current media sync state, like a media USN or sync token ).
	•	mediaChanges – Provide a list of media files that have changed on the server since the client’s last sync (so the client knows what to download).
	•	mediaList – (If needed) Provide the full list of media files on the server with checksums, for the client to compare. This might be used in sanity checks or first syncs.
	•	uploadChanges – Accept a batch upload (probably as a zip file) of new/updated media files and a manifest of deletions from the client  . The server will unzip this, save each file to the user’s media directory, update checksums in the media DB, and remove files the client deleted. The server should increment the media sync counter (musn) appropriately for each file processed .
	•	downloadFiles – Provide the client with a zip (or other packaged format) of requested media files. When the client finds files it’s missing (from mediaChanges), it will request them from the server. Implement an endpoint to package the specified media files into a zip for transfer.
	•	mediaSanity – (Optional) Perform any media folder cleanup or consistency check. Anki might call this to ensure the media database and files match (e.g. remove unused files). Implementing this helps mirror AnkiWeb’s behavior but could be prioritized lower if not critical initially.
	•	Match Official Protocol Details: Follow Anki’s current media sync protocol details closely:
	•	Use the same request/response formats as the official server. For example, ensure the endpoint URLs align (Anki clients expect a separate “media sync” base URL or endpoint, often /msync/ parallel to the main /sync/ ). The server should be configured to handle requests on the media endpoint and route them to the new media handlers.
	•	Adhere to size limits or the lack thereof: historically, a 100MB limit per media sync payload was used, but newer Anki versions have lifted download size limits for custom servers . Make any size limits (for uploads) configurable via environment variables (e.g. allow MAX_SYNC_PAYLOAD_MEGS to be increased ) to support large collections.
	•	Maintain the media USN (musn) properly. The meta sync response includes a musn (media update sequence number) which tells the client if media has changed . Update this musn whenever media files change so clients can detect changes.
	•	Testing During Implementation: As media sync is complex, test each operation in isolation:
	•	Simulate a client uploading a new media file and verify it appears in the server’s media directory and database.
	•	Simulate two clients: add a media file on one and ensure the other can download it on sync.
	•	Test deletion: remove a file on one side, sync, and verify the server deletes it and other clients get that deletion.
	•	Ensure the zip packaging/unpacking works for various file sizes and filenames (including unicode names, to match Anki’s handling of media names normalization).
	•	Milestone: By the end of this phase, full media synchronization support should be in place – meaning a user can sync a collection with images/audio between devices through our server, with all adds/edits/deletions of media reflected correctly.

Phase 4: Ensure Protocol-Level Compatibility with Latest Anki
	•	Align with Latest Sync Protocol Version: Update any protocol version identifiers or handshakes. If the Anki client and server exchange a version number or capabilities during login or sync initiation, ensure our server reports the expected version that the latest client uses. This prevents the client from rejecting the server as outdated.
	•	Meta Response and Additional Fields: Adjust the server’s initial meta response and others to include all fields the modern clients expect. For example, newer Anki might use fields like uname (username/email) or hostNum in the sync meta data . Our server should include these (at least as blank or default values) so that the client is satisfied:
	•	Set uname to the account’s username or email if applicable.
	•	Set hostNum if needed (AnkiWeb uses this for sharding; for a single self-hosted server it can be omitted or a constant).
	•	Continue to provide mod, scm, usn, musn, ts, cont, msg exactly as the official server would . In particular, ensure cont is normally true (allowing sync to continue) and only false if we intentionally need the client to stop (e.g. maintenance mode or fatal error), and use msg to convey any important information to the user.
	•	Update Conflict Flags: As part of conflict resolution, confirm that when a full sync is required, the server behaves as expected. The client’s logic (for Anki 2.1.x) will decide on a full sync if it sees schema differences or other anomalies , but the server can also trigger an abort. If our server ever detects an irreconcilable state, it might respond with an error or cont:false. Establish guidelines so that any such response is only used in legitimate cases (to avoid unnecessary sync interruptions).
	•	Use Official Reference Implementation: Cross-verify our updated protocol handling against Anki’s official sync server implementations. The Anki project now provides a reference server (including a Rust-based server as of Anki 2.1.66) that adheres to the latest protocol . We should use this as a benchmark:
	•	Read through the official server code or documentation to double-check how each endpoint is supposed to behave.
	•	If possible, run the official server in a test environment and observe how a modern client interacts with it (e.g. via network logs) to ensure our responses are formatted identically.
	•	Backward Compatibility (if needed): Ensure the server still supports slightly older clients if that’s a goal (for example, AnkiDroid or older Anki versions). The original server had logic for Anki 2.0.x vs 2.1.x differences; update this logic to handle differences between Anki 2.1 versions if any. (For instance, older AnkiDroid versions required manually specifying the media endpoint , so our server’s documentation should note the separate /msync/ URL for those clients.)
	•	Milestone: At this stage, the server should speak the exact “language” of the latest Anki Desktop. A new Anki client should sync without encountering unknown messages or missing fields. We will consider this complete when a battery of sync operations with the latest client runs flawlessly (no protocol errors, and client doesn’t complain about server version).

Phase 5: Testing and Validation
	•	Functional Testing with Anki Desktop: Rigorously test sync operations using the latest Anki Desktop (from jackymcgrady/anki or the official release):
	•	One-way Sync Tests: Modify content on only one side (server or client) and sync – verify changes propagate correctly (e.g. create decks/cards on client, sync up, then wipe client and sync down from server).
	•	Two-way Incremental Sync: Perform interleaved changes on two different devices (or one device and the server database directly) without full sync. For example, add a note on Desktop, without syncing, then add a different note on a second device, then sync both. The server should merge both changes so both notes end up on both devices after syncing. No data should be lost in the merge.
	•	Conflict Scenario: Simulate a conflict – e.g. edit the same note’s content differently on two devices offline. When syncing, verify the outcome matches Anki’s expected behavior. The likely result is that one edit wins (usually the later mod time) and the other device is either updated or a full-sync is triggered. Ensure that if a full sync is triggered, the client prompts for upload/download as it would with AnkiWeb. This confirms our conflict resolution mechanism mirrors Anki’s (the client should not silently fail or behave unpredictably).
	•	Media Sync Tests:
	•	Add media files on client A, sync, then sync client B – confirm files are downloaded to B.
	•	Delete a media file on client A, sync, confirm it’s removed on server and then on client B after sync.
	•	Test updating (overwriting) a media file with a new version and syncing. Check that checksum changes propagate and old version is replaced.
	•	Try a large batch of media changes at once to ensure our zip handling and size limits work (e.g. add 100+ images and sync).
	•	Edge Cases: Try to sync a very large collection or one with many media files to test performance and any size/timeouts. Also test syncing when the client’s clock is off by a large margin (the client should report a “clock off” error if >5 minute difference  – ensure our server provides correct timestamps (ts) to facilitate that detection).
	•	Automated Testing: Where possible, write unit tests for server components:
	•	Test the media file manifest generation and parsing (ensure _meta JSON is correctly read/written as in Anki’s format).
	•	Test database operations for sync (e.g. applying a change set to the server’s collection, removing graves, etc.) in isolation using known inputs and verifying the resulting state.
	•	Consider using Anki’s own test suites if available or writing a small script with Anki’s API to simulate a sync client. For example, use the anki.sync.Syncer class in a headless mode, pointed at our server, to automate some sync flows.
	•	Compatibility Validation: Test with AnkiDroid and AnkiMobile if possible, as they also use the sync server:
	•	Configure AnkiDroid to use the custom server and perform similar tests (AnkiDroid might have slightly different timeouts or assumptions).
	•	Ensure older clients (if any) that might not support some newer protocol features still work or at least fail gracefully with a clear message.
	•	Iteration: Expect to uncover bugs during testing. Prioritize fixing any data integrity issues first (e.g. cards not appearing, media file corruption, etc.), then fix user experience issues (like improper conflict messages or needing to sync twice to see changes). Repeat tests until the sync process is smooth and reliable.
	•	Milestone: Testing is complete when multiple full-cycle syncs (including initial full sync, incremental syncs, and media syncs) complete without errors or unintended behavior on the latest clients. This phase ensures confidence that our implementation truly matches Anki Desktop’s expectations.

Phase 6: Deployment and Scalability Considerations
	•	Performance Tuning: Optimize the server for handling many users and large collections:
	•	Database Performance: If using SQLite (as Anki does) for each user’s collection, ensure proper vacuuming or indexing so sync queries run quickly. Large collections should not time out. Consider moving to a more robust DB (PostgreSQL/MySQL) if multi-user load is high, but SQLite per user may suffice initially.
	•	Media Storage & Transfer: Large media syncs can be bandwidth-intensive. Ensure the server and network can handle large file zips. The environment should allow big uploads/downloads (e.g. adjust web server client_max_body_size if using Nginx reverse proxy  ). Streaming the zip data rather than loading fully into memory will help memory usage.
	•	Concurrency: Determine how to handle concurrent sync requests:
	•	Two syncs for the same user should not run simultaneously (this could corrupt the collection). Implement a locking mechanism per user – e.g. when a user starts a sync, mark it active and reject or queue a second concurrent attempt with a clear message. This mirrors AnkiWeb’s behavior of one sync at a time per account.
	•	Syncs for different users should be handled in parallel. If the server uses a WSGI app or similar, ensure it’s deployed with a process/thread model that can handle multiple requests. For example, run under a multi-threaded server or multiple worker processes.
	•	Scalability: If anticipating many users or heavy usage:
	•	Consider horizontal scaling strategies. Since the sync server is stateful (each user’s data on disk), scaling might involve sharing a network storage or database. Document potential approaches (e.g. an NFS share for media and DB files across instances, or partition users by host if implementing hostNum sharding in the future).
	•	Use the official Rust server as a guide for performance-critical sections; it’s built for better concurrency and could be an upgrade path in the long term  if Python performance becomes a bottleneck.
	•	Resource Limits: Keep an eye on memory and CPU. Loading a large collection or building a big media zip can be intensive. Implement safeguards like:
	•	Limit on maximum collection size or media file count per sync (if not already handled by chunking).
	•	Stream files directly to disk and vice versa to avoid high memory usage.
	•	Robustness and Error Handling: Improve the server’s resilience:
	•	Ensure that partial sync failures don’t leave the server in a bad state. Use database transactions or rollback mechanisms around sync operations so that if something fails (e.g. network drops mid-upload), the collection isn’t half-updated. For media, consider a temp directory for incoming files and only commit them to the media folder and update the index once all files are received and processed.
	•	Log important events and errors. Maintain logs for each sync session (login attempts, sync start/end, any conflicts resolved, etc.) to aid in debugging and to monitor usage patterns.
	•	Set up monitoring/alerts for the server (e.g. if sync failures spike or if throughput is slow). This helps ensure a good experience at scale.
	•	Deployment Steps: Finally, outline the steps to deploy the updated server:
	•	Prepare configuration instructions for users (how to set SYNC_BASE, create user accounts, configure Anki clients to point to the server’s URL, etc.). Update documentation to cover media sync setup and any new environment variables or settings.
	•	If migrating from an older version of the sync server, include a migration plan (e.g. if any schema changes in collection or media DB, write a migration script).
	•	Do a staged rollout if possible – run the new server in parallel with a test account before switching all users to it. This can catch any remaining issues under real usage.
	•	Milestone: Deployment phase is complete when the upgraded sync server is running in production, supporting concurrent syncs without issues. The server should stably handle many sync operations, including heavy media transfers, while preserving data integrity. Ongoing maintenance procedures (backups of user data, monitoring, applying future Anki protocol changes quickly) should be in place to keep the server reliable .

⸻

By following this phased roadmap, we will achieve a fully compatible Anki sync server that supports complete deck, card, and media synchronization, robust conflict resolution aligned with Anki’s logic, and up-to-date protocol support for the latest Anki clients. This plan emphasizes careful auditing, incremental development (with media sync as a focal point), close adherence to Anki’s official protocol definitions, and thorough testing – all of which will ensure a seamless sync experience comparable to AnkiWeb for our users. The end result will be a self-hosted sync server ready for modern Anki usage, with the capacity to scale and adapt to future Anki updates  .