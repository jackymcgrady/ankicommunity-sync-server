

services:
  anki-sync-server:
    image: ${ANKI_IMAGE:-ghcr.io/jackymcgrady/ankicommunity-sync-server:latest}
    container_name: anki-sync-server-prod
    # Don't expose HTTP port directly - only through HTTPS proxy
    expose:
      - "27702"
    volumes:
      - ./data:/data
      - ./config:/app/config
      - ./logs:/app/logs
    environment:
      - ANKISYNCD_CONFIG_PATH=/app/ankisyncd.conf
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    restart: unless-stopped
    networks:
      - anki-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:27702/status')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # HTTPS proxy is the main entry point for production
  anki-https-proxy:
    image: ${ANKI_PROXY_IMAGE:-ghcr.io/jackymcgrady/ankicommunity-sync-server-proxy:latest}
    container_name: anki-https-proxy-prod
    ports:
      - "443:27703"     # Standard HTTPS port
      - "27703:27703"   # Alternative HTTPS port
    volumes:
      - ./certs:/app/certs
      - ./logs:/app/logs
    environment:
      - ANKI_SERVER_HOST=anki-sync-server
      - ANKI_SERVER_PORT=27702
      - HTTPS_PORT=27703
      - TZ=UTC
      - SSL_CERT_FILE=/app/certs/server.crt
      - SSL_KEY_FILE=/app/certs/server.key
    depends_on:
      anki-sync-server:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - anki-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "python", "-c", "import ssl, socket; ssl.create_default_context().wrap_socket(socket.socket()).connect(('localhost', 27703))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Add a reverse proxy for SSL termination
  nginx:
    image: nginx:alpine
    container_name: anki-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - anki-sync-server
      - anki-https-proxy
    restart: unless-stopped
    networks:
      - anki-network
    profiles:
      - nginx
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Add monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: anki-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - anki-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: anki-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - anki-network
    profiles:
      - monitoring

networks:
  anki-network:
    driver: bridge

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 